var core = require('../../core');


/**
 * @author Vico @vicocotea
 * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js
 */

/**
 * A Noise effect filter.
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 */
function FilmFilter()
{
    core.Filter.call(this,
        // vertex shader
        "#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",
        // fragment shader
        "precision highp float;\n#define GLSLIFY 1\n\nvarying vec2 vTextureCoord;\n\nuniform float time;\nuniform bool grayscale;\nuniform float nIntensity;\nuniform float sIntensity;\nuniform float sCount;\n\nuniform sampler2D uSampler;\n\nvoid main() {\n\n\tvec4 cTextureScreen = texture2D(uSampler, vTextureCoord);\n\n\tfloat x = vTextureCoord.x * vTextureCoord.y * time *  1000.0;\n\tx = mod( x, 13.0 ) * mod( x, 123.0 );\n\tfloat dx = mod( x, 0.01 );\n\n\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp(0.1 + dx * 100.0, 0.0, 1.0);\n\n\tvec2 sc = vec2(sin(vTextureCoord.y * sCount), cos( vTextureCoord.y * sCount));\n\n\tcResult += cTextureScreen.rgb * vec3(sc.x, sc.y, sc.x) * sIntensity;\n\n\tcResult = cTextureScreen.rgb + clamp(nIntensity, 0.0,1.0) * (cResult - cTextureScreen.rgb);\n\n\tif (grayscale) {\n\n\t\tcResult = vec3(cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11);\n\t}\n\n\tgl_FragColor = vec4(cResult, cTextureScreen.a);\n}"
    );

    this.uniforms = {
        time:       0.0,
        nIntensity: 0.5,
        sIntensity: 0.05,
        sCount:     4096,
        grayscale:  0
    };
}

FilmFilter.prototype = Object.create(core.Filter.prototype);
FilmFilter.prototype.constructor = FilmFilter;
module.exports = FilmFilter;

Object.defineProperties(FilmFilter.prototype, {
    /**
     * Time
     *
     * @member {int}
     * @memberof PIXI.filters.FilmFilter#
     * @default 1
     */
    time: {
        get: function ()
        {
            return this.uniforms.time;
        },
        set: function (value)
        {
            this.uniforms.time = value;
        }
    },
    /**
     * nIntensity
     *
     * @member {int}
     * @memberof PIXI.filters.FilmFilter#
     * @default 0.02
     */
    nIntensity: {
        get: function ()
        {
            return this.uniforms.nIntensity;
        },
        set: function (value)
        {
            this.uniforms.nIntensity = value;
        }
    },
    /**
     * sIntensity
     *
     * @member {int}
     * @memberof PIXI.filters.FilmFilter#
     * @default 0.02
     */
    sIntensity: {
        get: function ()
        {
            return this.uniforms.sIntensity;
        },
        set: function (value)
        {
            this.uniforms.sIntensity = value;
        }
    },
    /**
     * sCount
     *
     * @member {int}
     * @memberof PIXI.filters.FilmFilter#
     * @default 0.02
     */
    sCount: {
        get: function ()
        {
            return this.uniforms.sCount;
        },
        set: function (value)
        {
            this.uniforms.sCount = value;
        }
    },
    /**
     * grayscale
     *
     * @member {int}
     * @memberof PIXI.filters.FilmFilter#
     * @default 0.02
     */
    grayscale: {
        get: function ()
        {
            return this.uniforms.grayscale;
        },
        set: function (value)
        {
            this.uniforms.grayscale = value;
        }
    }
});
