var core = require('../../core');


/**
 * @author Vico @vicocotea
 * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js
 */

/**
 * A Noise effect filter.
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 */
function GlitchFilter()
{
    core.Filter.call(this,
        // vertex shader
        "#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",
        // fragment shader
        "precision highp float;\n#define GLSLIFY 1\n\nvarying vec2 vTextureCoord;\n\nuniform int byp;\nuniform float amount;\nuniform float angle;\nuniform float seed;\nuniform float seedX;\nuniform float seedY;\nuniform float distortionX;\nuniform float distortionY;\nuniform float colS;\n\nuniform sampler2D uSampler;\n\nfloat rand (vec2 co) {\n\t\n\treturn fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main() {\n\n\tif (byp < 1) {\n\n\t\tvec2 p = vTextureCoord;\n\n\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\n\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\n\n\t\tvec4 normal = texture2D(uSampler, p*seed*seed);\n\n\t\tif (p.y < distortionX + colS && p.y > distortionX - colS * seed) {\n\n\t\t\tif (seedX > 0.) {\n\n\t\t\t\tp.y = 1. - (p.y + distortionY);\n\t\t\t\n\t\t\t} else {\n\n\t\t\t\tp.y = distortionY;\n\t\t\t}\n\t\t}\n\n\t\tif (p.x < distortionY + colS && p.x > distortionY - colS * seed) {\n\t\t\n\t\t\tif (seedY > 0.) {\n\t\t\t\t\n\t\t\t\tp.x = distortionX;\n\t\t\t\n\t\t\t} else {\n\t\t\t\n\t\t\t\tp.x = 1. - (p.x + distortionX);\n\t\t\t}\n\t\t}\n\n\t\tp.x += normal.x * seedX * (seed / 5.);\n\t\tp.y += normal.y * seedY * (seed / 5.);\n\n\t\tvec2 offset = amount * vec2(cos(angle), sin(angle));\n\t\tvec4 cr = texture2D(uSampler, p + offset);\n\t\tvec4 cga = texture2D(uSampler, p);\n\t\tvec4 cb = texture2D(uSampler, p - offset);\n\n\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n\n\t\tvec4 snow = 200. * amount * vec4(rand(vec2(xs * seed, ys * seed * 50.)) * 0.2);\n\n\t\tgl_FragColor = gl_FragColor + snow;\n\n\t} else {\n\n    \tgl_FragColor = texture2D(uSampler, vTextureCoord);\n\t}\n}"
    );

    this.uniforms = {
        byp:           1.0,
        angle:         0.02,
        amount:        0.08,
        seed:          0.02,
        seedX:         0.02,
        seedY:         0.02,
        distortionX:   0.5,
        distortionY:   0.6,
        colS:          0.05
    };
}

GlitchFilter.prototype = Object.create(core.Filter.prototype);
GlitchFilter.prototype.constructor = GlitchFilter;
module.exports = GlitchFilter;

Object.defineProperties(GlitchFilter.prototype, {
    /**
     * Bypass Glitch.
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 1
     */
    byp: {
        get: function ()
        {
            return this.uniforms.byp;
        },
        set: function (value)
        {
            this.uniforms.byp = value;
        }
    },
    /**
     * Seed
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    seed: {
        get: function ()
        {
            return this.uniforms.seed;
        },
        set: function (value)
        {
            this.uniforms.seed = value;
        }
    },
    /**
     * Amount
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    amount: {
        get: function ()
        {
            return this.uniforms.amount;
        },
        set: function (value)
        {
            this.uniforms.amount = value;
        }
    },
    /**
     * Angle
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    angle: {
        get: function ()
        {
            return this.uniforms.angle;
        },
        set: function (value)
        {
            this.uniforms.angle = value;
        }
    },
    /**
     * Seed_X
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    seedX: {
        get: function ()
        {
            return this.uniforms.seedX;
        },
        set: function (value)
        {
            this.uniforms.seedX = value;
        }
    },
    /**
     * Seed_Y
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    seedY: {
        get: function ()
        {
            return this.uniforms.seedY;
        },
        set: function (value)
        {
            this.uniforms.seedY = value;
        }
    },
    /**
     * Distortion_X
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    distortionX: {
        get: function ()
        {
            return this.uniforms.distortionX;
        },
        set: function (value)
        {
            this.uniforms.distortionX = value;
        }
    },
    /**
     * Distortion_Y
     *
     * @member {int}
     * @memberof PIXI.filters.GlitchFilter#
     * @default 0.02
     */
    distortionY: {
        get: function ()
        {
            return this.uniforms.distortionY;
        },
        set: function (value)
        {
            this.uniforms.distortionY = value;
        }
    }
});
